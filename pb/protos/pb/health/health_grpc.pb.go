// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package health

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthServicesClient is the client API for HealthServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthServicesClient interface {
	CreateHealth(ctx context.Context, in *CreateHealthRequest, opts ...grpc.CallOption) (*Health, error)
	UpdateHealth(ctx context.Context, in *UpdateHealthRequest, opts ...grpc.CallOption) (*Health, error)
	GetDateToBeHealthy(ctx context.Context, in *GetDateToBeFineRequest, opts ...grpc.CallOption) (*GetDateToBeFineResponse, error)
	DeleteHealth(ctx context.Context, in *DeleteHealthRequest, opts ...grpc.CallOption) (*Empty, error)
}

type healthServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServicesClient(cc grpc.ClientConnInterface) HealthServicesClient {
	return &healthServicesClient{cc}
}

func (c *healthServicesClient) CreateHealth(ctx context.Context, in *CreateHealthRequest, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/health.HealthServices/CreateHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServicesClient) UpdateHealth(ctx context.Context, in *UpdateHealthRequest, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/health.HealthServices/UpdateHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServicesClient) GetDateToBeHealthy(ctx context.Context, in *GetDateToBeFineRequest, opts ...grpc.CallOption) (*GetDateToBeFineResponse, error) {
	out := new(GetDateToBeFineResponse)
	err := c.cc.Invoke(ctx, "/health.HealthServices/GetDateToBeHealthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServicesClient) DeleteHealth(ctx context.Context, in *DeleteHealthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/health.HealthServices/DeleteHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServicesServer is the server API for HealthServices service.
// All implementations must embed UnimplementedHealthServicesServer
// for forward compatibility
type HealthServicesServer interface {
	CreateHealth(context.Context, *CreateHealthRequest) (*Health, error)
	UpdateHealth(context.Context, *UpdateHealthRequest) (*Health, error)
	GetDateToBeHealthy(context.Context, *GetDateToBeFineRequest) (*GetDateToBeFineResponse, error)
	DeleteHealth(context.Context, *DeleteHealthRequest) (*Empty, error)
	mustEmbedUnimplementedHealthServicesServer()
}

// UnimplementedHealthServicesServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServicesServer struct {
}

func (UnimplementedHealthServicesServer) CreateHealth(context.Context, *CreateHealthRequest) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHealth not implemented")
}
func (UnimplementedHealthServicesServer) UpdateHealth(context.Context, *UpdateHealthRequest) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHealth not implemented")
}
func (UnimplementedHealthServicesServer) GetDateToBeHealthy(context.Context, *GetDateToBeFineRequest) (*GetDateToBeFineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDateToBeHealthy not implemented")
}
func (UnimplementedHealthServicesServer) DeleteHealth(context.Context, *DeleteHealthRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHealth not implemented")
}
func (UnimplementedHealthServicesServer) mustEmbedUnimplementedHealthServicesServer() {}

// UnsafeHealthServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServicesServer will
// result in compilation errors.
type UnsafeHealthServicesServer interface {
	mustEmbedUnimplementedHealthServicesServer()
}

func RegisterHealthServicesServer(s grpc.ServiceRegistrar, srv HealthServicesServer) {
	s.RegisterService(&HealthServices_ServiceDesc, srv)
}

func _HealthServices_CreateHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServicesServer).CreateHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/health.HealthServices/CreateHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServicesServer).CreateHealth(ctx, req.(*CreateHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthServices_UpdateHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServicesServer).UpdateHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/health.HealthServices/UpdateHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServicesServer).UpdateHealth(ctx, req.(*UpdateHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthServices_GetDateToBeHealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDateToBeFineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServicesServer).GetDateToBeHealthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/health.HealthServices/GetDateToBeHealthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServicesServer).GetDateToBeHealthy(ctx, req.(*GetDateToBeFineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthServices_DeleteHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServicesServer).DeleteHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/health.HealthServices/DeleteHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServicesServer).DeleteHealth(ctx, req.(*DeleteHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthServices_ServiceDesc is the grpc.ServiceDesc for HealthServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.HealthServices",
	HandlerType: (*HealthServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHealth",
			Handler:    _HealthServices_CreateHealth_Handler,
		},
		{
			MethodName: "UpdateHealth",
			Handler:    _HealthServices_UpdateHealth_Handler,
		},
		{
			MethodName: "GetDateToBeHealthy",
			Handler:    _HealthServices_GetDateToBeHealthy_Handler,
		},
		{
			MethodName: "DeleteHealth",
			Handler:    _HealthServices_DeleteHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/health.proto",
}
